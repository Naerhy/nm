===== PARSING =====

- check ELF magic number && size > 4
- check 32 or 64 bits and if size > structure size
- check endian && if invalid
- check current elf version and if invalid [?]
- check file type > relocatable | executable | shared
- check ph offset with file size
- check sh offset with file size
- check size of elf with struct
- check phentsize with size of ph struct
- check if phentsize * e_phnum < offset + file size
- check shentsize with size of sh struct
- check if shentsize * e_shnum < offset + file size
- check if symtab exists > else no symbols

===== SYMBOLS =====

! do not include symbols of type SECTION or FILE

- A:
	- st_shndx == SHN_ABS
- B:
	- sh_type == SHT_NOBITS
	- sh_flags == SHF_WRITE + SHF_ALLOC
	- st_info == STB_GLOBAL
- b:
	- sh_type == SHT_NOBITS
	- sh_flags == SHF_WRITE + SHF_ALLOC
	- st_info == STB_LOCAL
- C:
	- st_shndx = SHN_COMMON
- c:
	- ...
- D:
	- sh_flags == SHF_WRITE + SHF_ALLOC
	- st_info == STB_GLOBAL
- d:
	- sh_flags == SHF_WRITE + SHF_ALLOC
	- st_info == STB_LOCAL
- G:
	- ...
- g:
	- ...
- i:
	- st_info == STT_GNU_IFUNC
- I:
	- ...
- N:
	- sh_name == .debug || .line
- n:
	- sh_name == .rodata
- p:
	- ... (sh_name == .eh_frame [?])
- R:
	- sh_flags != SHF_WRITE
	- st_info == STB_GLOBAL
- r:
	- sh_flags != SHF_WRITE
	- st_info == STB_LOCAL
- S:
	- ...
- s:
	- ...
- T:
	- sh_flags == SHF_EXECINSTR
	- st_info == STB_GLOBAL
- t:
	- sh_flags == SHF_EXECINSTR
	- st_info == STB_LOCAL
- U:
	- st_shndx == SHN_UNDEF
- u:
	- st_info == STB_GNU_UNIQUE
- V:
	- st_info == STB_WEAK + STT_OBJECT
	- st_shndx != SHN_UNDEF
- v:
	- st_info == STB_WEAK + STT_OBJECT
	- st_shndx == SHN_UNDEF
- W:
	- st_info == STB_WEAK
	- st_shndx != SHN_UNDEF
- w:
	- st_info == STB_WEAK
	- st_shndx == SHN_UNDEF
- -:
	- ...
- ?:
	- symbol is unknown (= else)
